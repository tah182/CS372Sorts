Assignment 4 Function Ideas

//********************************************************************* 
// FUNCTION:        main()
// DESCRIPTION:     declares initial variables and calls functions that will perform program operations
// INPUT:
//  Parameters: 	argc - count of command line arguments
//                  argv - array containing command line arguments
// OUTPUT: 
//  Return value:   0 - successful program run
// CALLS TO:        displayMainMenu()
//                  getSortingChoices()
//                  getSortTrials
//                  generateArray()
//                  fillRandomArray()
//                  bubbleSort()
// IMPLEMENTED BY:  Neil Townsend	
//**********************************************************************
int main(int argc, const char * argv[]) {

return 0;
}

//*********************************************************************
// FUNCTION:        displayMainMenu()
// DESCRIPTION:     displays the main menu and program instructions to user
// IMPLEMENTED BY:  Tah Tatsumoto
//**********************************************************************
void displayMainMenu() {
    cout << "Main menu displayed" << endl;
}

//*********************************************************************
// FUNCTION:        getInput()
// DESCRIPTION:     reads number entered by user and validates the value
// OUTPUT:
//  Return Value:   inputValue - value entered by user and validated
//
// IMPLEMENTED BY: Tah Tatsumoto
//**********************************************************************
void getSortingChoices() {
    return inputValue;
}

//*********************************************************************
// FUNCTION:        generateArray()
// DESCRIPTION:     allocates memory for a new array of variable sizes for integers
// INPUT:
//  Parameters: 	arraySize - length of desired array
// OUTPUT:
//  Return value:   newArray - pointer to allocated memory for array
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
int* generateArray(int arraySize) {
    cout << "Generated new array with space for " << arraySize << endl;

    return newArray;
}

//*********************************************************************
// FUNCTION:        fillRandomArray()
// DESCRIPTION:     fills variable size array with random values
// INPUT:
//  Parameters:     newArray - pointer to array that needs to be filled with random values
//                  arraySize - length of array
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
void fillRandomArray(int *newArray, int arraySize) {
    cout << "Filled array with " << arraySize << " random values" << endl;

}

//*********************************************************************
// FUNCTION:        getRandInt()
// DESCRIPTION:     generates and returns a random value within acceptable bounds
// OUTPUT:
//  Return Value:   randInt - random integer within bounds
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
int getRandInt() {
    return randInt;
}

//*********************************************************************
// FUNCTION:        copyArray()
// DESCRIPTION:     copies values from one array to another equally sized array
// INPUT:
//  Parameters:     originalArray - array containing values to copy
//		    newArray - array to copy values into
// IMPLEMENTED BY:  TahTatsumoto
//**********************************************************************
void (int *originalArray, int *newArray) {
    
}

//*********************************************************************
// FUNCTION:        loopControl()
// DESCRIPTION:     controls processes as chosen sorts are evaluated multiple times
// INPUT:
//  Parameters:     optionArray - array containing number of trials and which sorting
//		    sorting algorithms to test
// IMPLEMENTED BY:  Tah Tatsumoto
//**********************************************************************
void loopControl() {

}

//*********************************************************************
// FUNCTION:        pickSort()
// DESCRIPTION:     chooses which sorting algorithm to use to sort an array with random values
// INPUT:
//  Parameters:     sortOption - which sorting option the user chose
//	    	    sortArray - array containing random values to sort
// OUTPUT:
//  Return Value:   time - time taken to sort array
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
int pickSort(int sortOption, int *sortArray) {
    cont << “It took “ << time << “ clock cycles to sort the array.” << end;
}

//*********************************************************************
// FUNCTION:        bubbleSort()
// DESCRIPTION:     performs a bubble sort on a provided array
// INPUT:
//  Parameters: 	unsortedArray[] - array that contains unsorted values
//                  arraySize - size of unsorted array in indices
// IMPLEMENTED BY:  Tah Tatsumoto
//**********************************************************************
void bubbleSort(int *unsortedArray, int arraySize) {
    cout << "Array has been sorted using a bubble sort" << endl;

}

//*********************************************************************
// FUNCTION:        insertionSort()
// DESCRIPTION:     performs an insertion sort on a provided array
// INPUT:
//  Parameters: 	unsortedArray[] - array that contains unsorted values
//                  arraySize - size of unsorted array in indices
// IMPLEMENTED BY:  Neil TOwnsend
//**********************************************************************
void insertionSort(int *unsortedArray, int arraySize) {
    cout << "Array has been sorted using an insertion sort" << endl;
}

//*********************************************************************
// FUNCTION:        mergeSort()
// DESCRIPTION:     performs a merge sort on a provided array
// INPUT:
//  Parameters: 	unsortedArray[] - array that contains unsorted values
//                  arraySize - size of unsorted array in indices
// IMPLEMENTED BY:  Tah Tatsumoto
//**********************************************************************
void mergeSort(int *unsortedArray, int arraySize) {
    cout << "Array has been sorted using a merge sort" << endl;
}

//*********************************************************************
// FUNCTION:        quickSort()
// DESCRIPTION:     performs a quick sort on a provided array
// INPUT:
//  Parameters: 	unsortedArray[] - array that contains unsorted values
//                  arraySize - size of unsorted array in indices
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
void quickSort(int *unsortedArray, int arraySize) {
    cout << "Array has been sorted using a quick sort" << endl;
}

//*********************************************************************
// FUNCTION:        validateSort()
// DESCRIPTION:     validates whether or not a sorting algorithm completed sorting process successfully
// INPUT:
//  Parameters:     unsortedArray[] - array that contains unsorted values
//                  arraySize - size of unsorted array in indices
// OUTPUT:
//  Return value:   sortValidated - boolean for whether or not sort was successful
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
bool validateSort() {
    cout << "Sorting process validation code: " << sortValidated << endl;

    return sortValidated;
}

//*********************************************************************
// FUNCTION:        displayResults()
// DESCRIPTION:     displays results of sorting algorithms to user
// INPUT:
//  Parameters:     sortChoice1 - first sorting algorithm choice
//                  sortChoice2 - second sorting algorithm choice
//                  sortAverage1 - average time of first sorting algorithm
//                  sortAverage2 - average time of second sorting algorithm
// IMPLEMENTED BY:  Tah Tatsumoto
//**********************************************************************
void displayResults(char sortChoice1, char sortChoice2, double sortAverage1, double sortAverage2) {
    cout << "displayResults called with sort choices " << sortChoice1 << " and " << sortChoice2;
    cout << " with averages " << sortAverage1 << " and " << sortAverage2 << endl;

}

//*********************************************************************
// FUNCTION:        getAvgTime()
// DESCRIPTION:     calculates length of time that a sorting algorithm took to sort a list
// INPUT:
//  Parameters: 	startTime - starting time of sorting algorithm
//                  endTime - ending time of sorting algorithm
// OUTPUT:
//  Return value:   runTime - running time for sorting algorithm
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
int getAvgTime(int startTime, int endTime) {
    cout << "calculateTime called with start time " << startTime << " and end time " << endTime << endl;
}

//*********************************************************************
// FUNCTION:        freeMemory()
// DESCRIPTION:     deallocates memory used for results arrays
// INPUT:
//  Parameters: 	deleteArray - pointer to array that needs to be deallocated
// OUTPUT:
//  Return value:   deleteArray - pointer to deallocated array, reassigned to NULL
// IMPLEMENTED BY:  Neil Townsend
//**********************************************************************
int* freeMemory(int *deleteArray) {
    cout << "deallocateMemory called, memory at address " << deleteArray << " deleted." << endl;

    return deleteArray;
}



